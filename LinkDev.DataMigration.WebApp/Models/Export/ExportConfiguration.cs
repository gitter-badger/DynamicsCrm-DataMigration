//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.12.13.0 (NJsonSchema v9.10.14.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace Model
{
#pragma warning disable // Disable all warnings



	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.14.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class Record
	{
		[Newtonsoft.Json.JsonProperty("defId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DefId
		{
			get; set;
		}

		[Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Label
		{
			get; set;
		}

		[Newtonsoft.Json.JsonProperty("logicalName", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public string LogicalName
		{
			get; set;
		}

		[Newtonsoft.Json.JsonProperty("fetchXml", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string FetchXml
		{
			get; set;
		}

		[Newtonsoft.Json.JsonProperty("relations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.List<Relation> Relations
		{
			get; set;
		}

		[Newtonsoft.Json.JsonProperty("valuesMapping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ValuesMapping ValuesMapping
		{
			get; set;
		}

		[Newtonsoft.Json.JsonProperty("isDeleteObsoleteRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsDeleteObsoleteRecords
		{
			get; set;
		}

		[Newtonsoft.Json.JsonProperty("isUseAlternateKeysForRecord", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsUseAlternateKeysForRecord
		{
			get; set;
		}

		[Newtonsoft.Json.JsonProperty("isUseAlternateKeysForLookups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsUseAlternateKeysForLookups
		{
			get; set;
		}

		[Newtonsoft.Json.JsonProperty("isClearInvalidLookups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsClearInvalidLookups
		{
			get; set;
		}

		[Newtonsoft.Json.JsonProperty("isCreateNewRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsCreateNewRecords
		{
			get; set;
		}

		[Newtonsoft.Json.JsonProperty("isUpdateExistingRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsUpdateExistingRecords
		{
			get; set;
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static Record FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<Record>(data);
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.14.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class Relation
	{
		[Newtonsoft.Json.JsonProperty("defId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DefId
		{
			get; set;
		}

		[Newtonsoft.Json.JsonProperty("schemaName", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public string SchemaName
		{
			get; set;
		}

		[Newtonsoft.Json.JsonProperty("relationType", Required = Newtonsoft.Json.Required.Always)]
		public double RelationType
		{
			get; set;
		}

		[Newtonsoft.Json.JsonProperty("isDeleteObsoleteRelations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsDeleteObsoleteRelations
		{
			get; set;
		}

		[Newtonsoft.Json.JsonProperty("isDisassociateObsoleteRelations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsDisassociateObsoleteRelations
		{
			get; set;
		}

		[Newtonsoft.Json.JsonProperty("entityDefinition", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public Record EntityDefinition { get; set; } = new Record();

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static Relation FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<Relation>(data);
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.14.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class ValueMapping
	{
		[Newtonsoft.Json.JsonProperty("isIgnoreValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsIgnoreValues
		{
			get; set;
		}

		[Newtonsoft.Json.JsonProperty("sourceField", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public string SourceField
		{
			get; set;
		}

		[Newtonsoft.Json.JsonProperty("sourceFieldType", Required = Newtonsoft.Json.Required.Always)]
		public double SourceFieldType
		{
			get; set;
		}

		[Newtonsoft.Json.JsonProperty("sourceValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string SourceValue
		{
			get; set;
		}

		[Newtonsoft.Json.JsonProperty("destinationField", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public string DestinationField
		{
			get; set;
		}

		[Newtonsoft.Json.JsonProperty("destinationFieldType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? DestinationFieldType
		{
			get; set;
		}

		[Newtonsoft.Json.JsonProperty("destinationValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DestinationValue
		{
			get; set;
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static ValueMapping FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<ValueMapping>(data);
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.14.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class ExportConfiguration
	{
		[Newtonsoft.Json.JsonProperty("exportOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ExportOptions ExportOptions
		{
			get; set;
		}

		[Newtonsoft.Json.JsonProperty("importOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ImportOptions ImportOptions
		{
			get; set;
		}

		[Newtonsoft.Json.JsonProperty("records", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.List<Record> Records
		{
			get; set;
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static ExportConfiguration FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<ExportConfiguration>(data);
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.14.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class ValuesMapping
	{
		[Newtonsoft.Json.JsonProperty("targetEntityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string TargetEntityName
		{
			get; set;
		}

		[Newtonsoft.Json.JsonProperty("valueMappings", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.List<ValueMapping> ValueMappings { get; set; } = new System.Collections.Generic.List<ValueMapping>();

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static ValuesMapping FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<ValuesMapping>(data);
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.14.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class ExportOptions
	{
		[Newtonsoft.Json.JsonProperty("isExcludeOwner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsExcludeOwner
		{
			get; set;
		}

		[Newtonsoft.Json.JsonProperty("isCompressData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public bool? IsCompressData
		{
			get; set;
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static ExportOptions FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<ExportOptions>(data);
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.14.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class ImportOptions
	{
		[Newtonsoft.Json.JsonProperty("bulkSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? BulkSize
		{
			get; set;
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static ImportOptions FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<ImportOptions>(data);
		}
	}

}